#if NET45
using System;
using System.Diagnostics.CodeAnalysis;
using System.Security.Cryptography;
using OpenGost.Security.Cryptography.Properties;

namespace OpenGost.Security.Cryptography
{
    using static CryptographyStrings;

    /// <summary>
    /// An elliptic curve.
    /// </summary>
    [SuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes")]
    public partial struct ECCurve
    {
        private Oid _oid;

        /// <summary>
        /// Coefficient A. Applies only to Explicit curves.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] A;

        /// <summary>
        /// Coefficient B. Applies only to Explicit curves.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] B;

        /// <summary>
        /// Base Point. Applies only to Explicit curves.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public ECPoint G;

        /// <summary>
        /// Order of the group generated by G = (x,y). Applies only to Explicit curves.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] Order;

        /// <summary>
        /// Cofactor (optional). Applies only to Explicit curves.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] Cofactor;

        /// <summary>
        /// Seed of the curve (optional). Applies only to Explicit curves.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] Seed;

        /// <summary>
        /// Curve type.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public ECCurveType CurveType;

        /// <summary>
        /// The hash algorithm used to generate A and B from the Seed. Applies only to Explicit curves.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public string Hash;

        /// <summary>
        /// The binary polynomial. Applies only to Characteristic2 curves.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] Polynomial;

        /// <summary>
        /// The prime specifying the base field.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] Prime;

        /// <summary>
        /// The <see cref="System.Security.Cryptography.Oid"/> representing the named curve.
        /// Applies only to Named curves.
        /// </summary>
        /// <value>
        /// An <see cref="System.Security.Cryptography.Oid"/> instance.
        /// </value>
        /// <exception cref="ArgumentNullException">
        /// The specified <see cref="System.Security.Cryptography.Oid"/> is <c>null</c>.
        /// </exception>
        /// <exception cref="ArgumentException">
        /// The specified <see cref="System.Security.Cryptography.Oid"/> is not valid.
        /// </exception>
        /// <remarks>
        /// A clone is returned, not the current instance.
        /// </remarks>
        public Oid Oid
        {
            get
            {
                // Ensure _oid remains immutable
                return new Oid(_oid.Value, _oid.FriendlyName);
            }
            private set
            {
                if (value == null) throw new ArgumentNullException(nameof(value));

                if (string.IsNullOrEmpty(value.Value) && string.IsNullOrEmpty(value.FriendlyName))
                    throw new ArgumentException(CryptographicInvalidCurveOid, nameof(value));

                _oid = value;
            }
        }

        private static ECCurve Create(Oid oid)
        {
            return new ECCurve
            {
                CurveType = ECCurveType.Named,
                Oid = oid
            };
        }

        /// <summary>
        /// Create a curve from the given <see cref="System.Security.Cryptography.Oid"/>.
        /// </summary>
        /// <param name="curveOid">
        /// The <see cref="System.Security.Cryptography.Oid"/> to use.
        /// </param>
        /// <returns>
        /// An <see cref="ECCurve"/> representing a named curve.
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="curveOid"/> parameter is <c>null</c>.
        /// </exception>
        /// <exception cref="ArgumentException">
        /// The specified <see cref="System.Security.Cryptography.Oid"/> is not valid.
        /// </exception>
        public static ECCurve CreateFromOid(Oid curveOid)
        {
            if (curveOid == null) throw new ArgumentNullException(nameof(curveOid));

            return Create(new Oid(curveOid.Value, curveOid.FriendlyName));
        }

        /// <summary>
        /// Create a curve from the given <see cref="System.Security.Cryptography.Oid"/> friendly name.
        /// </summary>
        /// <param name="oidFriendlyName">
        /// The <see cref="System.Security.Cryptography.Oid"/> friendly name to use.
        /// </param>
        /// <returns>
        /// An <see cref="ECCurve"/> representing a named curve.
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="oidFriendlyName"/> parameter is <c>null</c>.
        /// </exception>
        public static ECCurve CreateFromFriendlyName(string oidFriendlyName)
        {
            if (oidFriendlyName == null) throw new ArgumentNullException(nameof(oidFriendlyName));

            return CreateFromValueAndName(null, oidFriendlyName);
        }

        /// <summary>
        /// Create a curve from the given <see cref="System.Security.Cryptography.Oid"/> value.
        /// </summary>
        /// <param name="oidValue">
        /// The <see cref="System.Security.Cryptography.Oid"/> value to use.
        /// </param>
        /// <returns>
        /// An <see cref="ECCurve"/> representing a named curve.
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="oidValue"/> parameter is <c>null</c>.
        /// </exception>
        public static ECCurve CreateFromValue(string oidValue)
        {
            if (oidValue == null) throw new ArgumentNullException(nameof(oidValue));

            return CreateFromValueAndName(oidValue, null);
        }

        private static ECCurve CreateFromValueAndName(string oidValue, string oidFriendlyName)
            => Create(new Oid(oidValue, oidFriendlyName));

        /// <summary>
        /// Indicates whether the current <see cref="ECCurve" /> is prime.
        /// </summary>
        /// <value>
        /// <c>true</c> if the current <see cref="ECCurve" /> is prime;
        /// otherwise, <c>false</c>.
        /// </value>
        public bool IsPrime
            => CurveType == ECCurveType.PrimeShortWeierstrass || CurveType == ECCurveType.PrimeMontgomery || CurveType == ECCurveType.PrimeTwistedEdwards;

        /// <summary>
        /// Indicates whether the current <see cref="ECCurve" /> is characteristic 2.
        /// </summary>
        /// <value>
        /// <c>true</c> if the current <see cref="ECCurve" /> is characteristic 2;
        /// otherwise, <c>false</c>.
        /// </value>
        public bool IsCharacteristic2 => CurveType == ECCurveType.Characteristic2;

        /// <summary>
        /// Indicates whether the current <see cref="ECCurve" /> is explicit.
        /// </summary>
        /// <value>
        /// <c>true</c> if the current <see cref="ECCurve" /> is explicit;
        /// otherwise, <c>false</c>.
        /// </value>
        public bool IsExplicit => IsPrime || IsCharacteristic2;

        /// <summary>
        /// Indicates whether the current <see cref="ECCurve" /> is named.
        /// </summary>
        /// <value>
        /// <c>true</c> if the current <see cref="ECCurve" /> is named;
        /// otherwise, <c>false</c>.
        /// </value>
        public bool IsNamed => CurveType == ECCurveType.Named;

        /// <summary>
        /// Validate the current curve.
        /// </summary>
        /// <exception cref="CryptographicException">
        /// The curve parameters are not valid for the current <see cref="CurveType"/>.
        /// </exception>
        public void Validate()
        {
            if (IsNamed)
            {
                if (HasAnyExplicitParameters())
                    throw new CryptographicException(CryptographicInvalidNamedCurve);

                if (Oid == null || (string.IsNullOrEmpty(Oid.FriendlyName) && string.IsNullOrEmpty(Oid.Value)))
                    throw new CryptographicException(CryptographicInvalidCurveOid);
            }
            else if (IsExplicit)
            {
                var hasErrors = HasCommonExplicitCurveErrors();

                if (IsPrime)
                {
                    if (!hasErrors)
                        if (Prime == null || Prime.Length != A.Length)
                            hasErrors = true;

                    if (hasErrors)
                        throw new CryptographicException(CryptographicInvalidPrimeCurve);
                }
                else if (IsCharacteristic2)
                {
                    if (!hasErrors)
                        if (Polynomial == null || Polynomial.Length == 0)
                            hasErrors = true;

                    if (hasErrors)
                        throw new CryptographicException(CryptographicInvalidCharacteristic2Curve);
                }
            }
            else
            {
                // Implicit; if there are any values, throw
                if (HasAnyExplicitParameters() || Oid != null)
                    throw new CryptographicException(CryptographicCurveNotSupported(CurveType));
            }
        }

        private bool HasCommonExplicitCurveErrors()
        {
            if (A == null ||
                B == null || B.Length != A.Length ||
                G.X == null || G.X.Length != A.Length ||
                G.Y == null || G.Y.Length != A.Length ||
                Order == null || Order.Length == 0 ||
                Cofactor == null || Cofactor.Length == 0)
            {
                return true;
            }

            return false;
        }

        private bool HasAnyExplicitParameters()
        {
            return (A != null ||
                B != null ||
                G.X != null ||
                G.Y != null ||
                Order != null ||
                Cofactor != null ||
                Prime != null ||
                Polynomial != null ||
                Seed != null ||
                Hash != null);
        }
    }
}
#endif
