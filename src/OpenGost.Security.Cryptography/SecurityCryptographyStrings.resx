<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentInvalidOffLen" xml:space="preserve">
    <value>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</value>
  </data>
  <data name="ArgumentOutOfRangeIndexLength" xml:space="preserve">
    <value>Index and length must refer to a location within the array.</value>
  </data>
  <data name="ArgumentOutOfRangeNeedNonNegNum" xml:space="preserve">
    <value>Non-negative number required.</value>
  </data>
  <data name="ArgumentOutOfRangeNeedPositiveNum" xml:space="preserve">
    <value>Positive number required.</value>
  </data>
  <data name="ArgumentOutOfRangeNegativeLength" xml:space="preserve">
    <value>Length cannot be less than zero.</value>
  </data>
  <data name="ArgumentOutOfRangeStartIndex" xml:space="preserve">
    <value>Start index cannot be less than zero.</value>
  </data>
  <data name="ArgumentOutOfRangeStartIndexLargerThanLength" xml:space="preserve">
    <value>Start index cannot be larger than length of array.</value>
  </data>
  <data name="CryptoConfigNotSupportedCmac" xml:space="preserve">
    <value>Accessing a symmetric algorithm by manipulating the SymmetricAlgorithmName property is not supported on this platform. Instead, you must instantiate one of the supplied subtypes (such as CMACGrasshopper.)</value>
  </data>
  <data name="CryptographicCurveNotSupported" xml:space="preserve">
    <value>The specified curve '{0}' or its parameters are not valid for this platform.</value>
  </data>
  <data name="CryptographicInsufficientOutputBuffer" xml:space="preserve">
    <value>Output buffer contains insufficient data size.</value>
  </data>
  <data name="CryptographicInvalidBlockSize" xml:space="preserve">
    <value>Specified block size is not valid for this algorithm.</value>
  </data>
  <data name="CryptographicInvalidCharacteristic2Curve" xml:space="preserve">
    <value>The specified Characteristic2 curve parameters are not valid. Polynomial, A, B, G.X, G.Y, and Order are required. A, B, G.X, G.Y must be the same length, and the same length as Q.X, Q.Y and D if those are specified. Seed, Cofactor and Hash are optional. Other parameters are not allowed.</value>
  </data>
  <data name="CryptographicInvalidCipherMode" xml:space="preserve">
    <value>Specified cipher mode is not valid for this algorithm.</value>
  </data>
  <data name="CryptographicInvalidCurveKeyParameters" xml:space="preserve">
    <value>The specified key or curve parameters are not valid.</value>
  </data>
  <data name="CryptographicInvalidCurveOid" xml:space="preserve">
    <value>The specified OID is not valid. The friendly name or value must be set</value>
  </data>
  <data name="CryptographicInvalidDataSize" xml:space="preserve">
    <value>Length of the data to transform is invalid.</value>
  </data>
  <data name="CryptographicInvalidFeedbackSize" xml:space="preserve">
    <value>Specified feedback is not a valid for this algorithm.</value>
  </data>
  <data name="CryptographicInvalidHashSize" xml:space="preserve">
    <value>Hash size must be {0} bytes.</value>
  </data>
  <data name="CryptographicInvalidIVSize" xml:space="preserve">
    <value>Specified initialization vector (IV) does not match allowed size for this algorithm.</value>
  </data>
  <data name="CryptographicInvalidKeySize" xml:space="preserve">
    <value>Specified key does not match allowed size for this algorithm.</value>
  </data>
  <data name="CryptographicInvalidNamedCurve" xml:space="preserve">
    <value>The specified named curve parameters are not valid. Only the OID parameter must be set.</value>
  </data>
  <data name="CryptographicInvalidOperation" xml:space="preserve">
    <value>This operation is not supported for this class.</value>
  </data>
  <data name="CryptographicInvalidPadding" xml:space="preserve">
    <value>Padding is invalid and cannot be removed.</value>
  </data>
  <data name="CryptographicInvalidPrimeCurve" xml:space="preserve">
    <value>The specified prime curve parameters are not valid. Prime, A, B, G.X, G.Y and Order are required and must be the same length, and the same length as Q.X, Q.Y and D if those are specified. Seed, Cofactor and Hash are optional. Other parameters are not allowed.</value>
  </data>
  <data name="CryptographicInvalidSignatureSize" xml:space="preserve">
    <value>Digital signature size must be {0} bytes.</value>
  </data>
  <data name="CryptographicMissingDomainParameters" xml:space="preserve">
    <value>Could not read the domain parameters from the XML string.</value>
  </data>
  <data name="CryptographicMissingECDsaKeyValue" xml:space="preserve">
    <value>Could not read the elliptic curve key value parameters root element from the XML string.</value>
  </data>
  <data name="CryptographicMissingKey" xml:space="preserve">
    <value>No asymmetric key object has been associated with this formatter object.</value>
  </data>
  <data name="CryptographicMissingOid" xml:space="preserve">
    <value>Required object identifier (OID) cannot be found.</value>
  </data>
  <data name="CryptographicMissingPublicKey" xml:space="preserve">
    <value>Could not read the public key from the XML string.</value>
  </data>
  <data name="CryptographicSymmetricAlgorithmKeySet" xml:space="preserve">
    <value>The key cannot be changed after the first write to the stream.</value>
  </data>
  <data name="CryptographicSymmetricAlgorithmNameNullOrEmpty" xml:space="preserve">
    <value>The symmetric algorithm name cannot be null or empty.</value>
  </data>
  <data name="CryptographicSymmetricAlgorithmNameSet" xml:space="preserve">
    <value>Symmetric algorithm name cannot be changed after the first write to the stream.</value>
  </data>
  <data name="CryptographicUnexpectedXmlNamespace" xml:space="preserve">
    <value>The XML namespace '{0}' was unexpected, expected '{1}'.</value>
  </data>
  <data name="CryptographicUnknownEllipticCurveAlgorithm" xml:space="preserve">
    <value>Unknown elliptic curve algorithm.</value>
  </data>
  <data name="CryptographicUnknownSymmetricAlgorithm" xml:space="preserve">
    <value>'{0}' is not a known symmetric algorithm.</value>
  </data>
</root>